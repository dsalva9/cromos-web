
## ðŸ“¦ Subtask 9.2: Create "My Listings" view with sync

### Prompt for Claude CLI:
```
I need the "My Listings" view showing user's listings with inventory sync.

CONTEXT:
- Shows all user's listings (active, sold, removed)
- If listing from template, shows current duplicate count
- Alert if listing active but count = 0
- Mark as sold button (with auto-decrement)
- Backend RPC: get_my_listings_with_progress

TASK:
Create the my listings view:

FILE: src/app/marketplace/my-listings/page.tsx
```typescript
'use client';

import { useMyListings } from '@/hooks/integration/useMyListings';
import { MyListingCard } from '@/components/integration/MyListingCard';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Plus } from 'lucide-react';
import Link from 'next/link';
import AuthGuard from '@/components/AuthGuard';

function MyListingsContent() {
  const { listings, loading, error, refetch } = useMyListings();

  const activeListings = listings.filter(l => l.status === 'active');
  const soldListings = listings.filter(l => l.status === 'sold');
  const removedListings = listings.filter(l => l.status === 'removed');

  return (
    <div className="min-h-screen bg-[#1F2937]">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8">
          <div>
            <h1 className="text-3xl font-black uppercase text-white mb-2">
              My Listings
            </h1>
            <p className="text-gray-400">
              Manage your marketplace listings
            </p>
          </div>
          
          <Link href="/marketplace/create">
            <Button className="bg-[#FFC000] text-black hover:bg-[#FFD700]">
              <Plus className="mr-2 h-4 w-4" />
              New Listing
            </Button>
          </Link>
        </div>

        {/* Error State */}
        {error && (
          <div className="text-red-500 text-center py-8">
            Error loading listings: {error}
          </div>
        )}

        {/* Tabs */}
        <Tabs defaultValue="active" className="space-y-6">
          <TabsList className="grid w-full max-w-md grid-cols-3">
            <TabsTrigger value="active">
              Active ({activeListings.length})
            </TabsTrigger>
            <TabsTrigger value="sold">
              Sold ({soldListings.length})
            </TabsTrigger>
            <TabsTrigger value="removed">
              Removed ({removedListings.length})
            </TabsTrigger>
          </TabsList>

          {/* Active Listings */}
          <TabsContent value="active" className="space-y-4">
            {loading ? (
              <div className="flex justify-center py-8">
                <div className="animate-spin h-8 w-8 border-4 border-[#FFC000] border-r-transparent rounded-full" />
              </div>
            ) : activeListings.length === 0 ? (
              <div className="text-center py-16">
                <p className="text-gray-400 text-lg mb-4">
                  No active listings
                </p>
                <Link href="/marketplace/create">
                  <Button className="bg-[#FFC000] text-black">
                    Create Your First Listing
                  </Button>
                </Link>
              </div>
            ) : (
              activeListings.map(listing => (
                <MyListingCard
                  key={listing.listing_id}
                  listing={listing}
                  onUpdate={refetch}
                />
              ))
            )}
          </TabsContent>

          {/* Sold Listings */}
          <TabsContent value="sold" className="space-y-4">
            {soldListings.length === 0 ? (
              <div className="text-center py-16">
                <p className="text-gray-400">No sold listings</p>
              </div>
            ) : (
              soldListings.map(listing => (
                <MyListingCard
                  key={listing.listing_id}
                  listing={listing}
                  onUpdate={refetch}
                />
              ))
            )}
          </TabsContent>

          {/* Removed Listings */}
          <TabsContent value="removed" className="space-y-4">
            {removedListings.length === 0 ? (
              <div className="text-center py-16">
                <p className="text-gray-400">No removed listings</p>
              </div>
            ) : (
              removedListings.map(listing => (
                <MyListingCard
                  key={listing.listing_id}
                  listing={listing}
                  onUpdate={refetch}
                />
              ))
            )}
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}

export default function MyListingsPage() {
  return (
    <AuthGuard>
      <MyListingsContent />
    </AuthGuard>
  );
}
```

2. src/components/integration/MyListingCard.tsx
```typescript
'use client';

import { ModernCard, ModernCardContent } from '@/components/ui/modern-card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import Image from 'next/image';
import Link from 'next/link';
import { Eye, Edit, Trash, CheckCircle, AlertTriangle } from 'lucide-react';
import { useMarkSold } from '@/hooks/integration/useMarkSold';
import { toast } from 'sonner';
import { useState } from 'react';

interface MyListing {
  listing_id: string;
  title: string;
  description: string | null;
  sticker_number: string | null;
  collection_name: string | null;
  image_url: string | null;
  status: string;
  views_count: number;
  created_at: string;
  copy_id: string | null;
  slot_id: string | null;
  current_count: number | null;
  needs_attention: boolean;
}

interface MyListingCardProps {
  listing: MyListing;
  onUpdate: () => void;
}

export function MyListingCard({ listing, onUpdate }: MyListingCardProps) {
  const { markSold, loading } = useMarkSold();
  const [confirming, setConfirming] = useState(false);

  const handleMarkSold = async () => {
    if (!confirming) {
      setConfirming(true);
      return;
    }

    try {
      await markSold(listing.listing_id);
      toast.success('Listing marked as sold!');
      if (listing.copy_id && listing.slot_id) {
        toast.success('Duplicate count updated automatically');
      }
      onUpdate();
    } catch (error) {
      toast.error('Failed to mark as sold');
    } finally {
      setConfirming(false);
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString();
  };

  return (
    <ModernCard>
      <ModernCardContent className="p-0">
        <div className="flex flex-col md:flex-row gap-4 p-4">
          {/* Image */}
          <div className="relative w-full md:w-32 h-32 bg-[#374151] rounded-md flex-shrink-0">
            {listing.image_url ? (
              <Image
                src={listing.image_url}
                alt={listing.title}
                fill
                className="object-cover rounded-md"
              />
            ) : (
              <div className="w-full h-full flex items-center justify-center">
                <div className="text-4xl font-black text-gray-600">
                  {listing.title.charAt(0).toUpperCase()}
                </div>
              </div>
            )}
          </div>

          {/* Content */}
          <div className="flex-1 space-y-3">
            {/* Title and Status */}
            <div className="flex items-start justify-between gap-4">
              <div>
                <Link href={`/marketplace/${listing.listing_id}`}>
                  <h3 className="font-bold text-white text-lg hover:text-[#FFC000] transition-colors">
                    {listing.title}
                  </h3>
                </Link>
                {listing.collection_name && (
                  <p className="text-sm text-gray-400">{listing.collection_name}</p>
                )}
              </div>
              
              <Badge className={`
                ${listing.status === 'active' ? 'bg-green-500' : ''}
                ${listing.status === 'sold' ? 'bg-gray-500' : ''}
                ${listing.status === 'removed' ? 'bg-red-500' : ''}
                text-white uppercase flex-shrink-0
              `}>
                {listing.status}
              </Badge>
            </div>

            {/* Alert if needs attention */}
            {listing.needs_attention && (
              <Alert className="bg-red-900/20 border-red-700">
                <AlertTriangle className="h-4 w-4 text-red-400" />
                <AlertDescription className="text-red-200">
                  You no longer have duplicates of this card. Consider removing this listing.
                </AlertDescription>
              </Alert>
            )}

            {/* Sync Info */}
            {listing.copy_id && listing.slot_id && (
              <div className="flex items-center gap-2 text-sm">
                <Badge variant="outline" className="bg-blue-900/20 border-blue-700 text-blue-200">
                  Synced with Collection
                </Badge>
                {listing.current_count !== null && (
                  <span className="text-gray-400">
                    Current duplicates: <span className="font-bold text-white">{listing.current_count}</span>
                  </span>
                )}
              </div>
            )}

            {/* Stats */}
            <div className="flex items-center gap-4 text-sm text-gray-400">
              <div className="flex items-center gap-1">
                <Eye className="h-4 w-4" />
                {listing.views_count} views
              </div>
              <span>â€¢</span>
              <span>Created {formatDate(listing.created_at)}</span>
            </div>

            {/* Actions */}
            <div className="flex flex-wrap gap-2">
              {listing.status === 'active' && (
                <>
                  <Link href={`/marketplace/${listing.listing_id}/edit`}>
                    <Button size="sm" variant="outline">
                      <Edit className="mr-2 h-4 w-4" />
                      Edit
                    </Button>
                  </Link>
                  
                  <Button
                    size="sm"
                    onClick={handleMarkSold}
                    disabled={loading}
                    className="bg-green-700 hover:bg-green-600"
                  >
                    <CheckCircle className="mr-2 h-4 w-4" />
                    {confirming ? 'Click again to confirm' : 'Mark as Sold'}
                  </Button>
                </>
              )}

              {listing.status === 'removed' && (
                <Button
                  size="sm"
                  variant="outline"
                  onClick={() => {/* Implement reactivate */}}
                >
                  Reactivate
                </Button>
              )}
            </div>
          </div>
        </div>
      </ModernCardContent>
    </ModernCard>
  );
}
```

3. src/hooks/integration/useMyListings.ts
```typescript
import { useState, useEffect, useCallback } from 'react';
import { useSupabaseClient } from '@/components/providers/SupabaseProvider';

interface MyListing {
  listing_id: string;
  title: string;
  description: string | null;
  sticker_number: string | null;
  collection_name: string | null;
  image_url: string | null;
  status: string;
  views_count: number;
  created_at: string;
  copy_id: string | null;
  slot_id: string | null;
  current_count: number | null;
  needs_attention: boolean;
}

export function useMyListings() {
  const supabase = useSupabaseClient();
  const [listings, setListings] = useState<MyListing[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchListings = useCallback(async () => {
    try {
      setLoading(true);

      const { data, error: rpcError } = await supabase.rpc('get_my_listings_with_progress', {
        p_status: null, // Get all statuses
        p_limit: 100,
        p_offset: 0
      });

      if (rpcError) throw rpcError;

      setListings(data || []);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Unknown error');
    } finally {
      setLoading(false);
    }
  }, [supabase]);

  useEffect(() => {
    fetchListings();
  }, [fetchListings]);

  return { listings, loading, error, refetch: fetchListings };
}
```

4. src/hooks/integration/useMarkSold.ts
```typescript
import { useState } from 'react';
import { useSupabaseClient } from '@/components/providers/SupabaseProvider';

export function useMarkSold() {
  const supabase = useSupabaseClient();
  const [loading, setLoading] = useState(false);

  const markSold = async (listingId: string): Promise<void> => {
    try {
      setLoading(true);

      const { error } = await supabase.rpc('mark_listing_sold_and_decrement', {
        p_listing_id: parseInt(listingId)
      });

      if (error) throw error;
    } catch (error) {
      throw error;
    } finally {
      setLoading(false);
    }
  };

  return { markSold, loading };
}
```

FEATURES:
- Tabs for active/sold/removed
- Alert badge if needs attention (count = 0)
- Sync indicator for template-linked listings
- Current duplicate count display
- Mark as sold button (with confirm)
- Edit button for active listings
- View count and creation date
- Automatic decrement on sold

DELIVERABLES:
1. My listings page with tabs
2. MyListingCard with sync info
3. useMyListings hook
4. useMarkSold hook with auto-decrement

Give me git commands afterwards.
```