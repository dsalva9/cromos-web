ðŸ“¦ Subtask 9.1: Create publish duplicate modalPrompt for Claude CLI:I need a modal to publish a duplicate from collection to marketplace.

CONTEXT:
- Triggered from SlotTile "Publish" button
- Pre-fills listing data from slot/template
- User can edit before publishing
- Creates listing with link to slot
- Backend RPC: publish_duplicate_to_marketplace

TASK:
Create the publish modal:

FILES TO CREATE:

1. src/app/my-templates/[copyId]/publish/[slotId]/page.tsx
```typescript'use client';import { useParams, useRouter } from 'next/navigation';
import { useEffect, useState } from 'react';
import { useSupabaseClient } from '@/components/providers/SupabaseProvider';
import { ListingForm } from '@/components/marketplace/ListingForm';
import { usePublishDuplicate } from '@/hooks/integration/usePublishDuplicate';
import AuthGuard from '@/components/AuthGuard';
import { ModernCard, ModernCardContent } from '@/components/ui/modern-card';
import { Button } from '@/components/ui/button';
import { ArrowLeft } from 'lucide-react';
import Link from 'next/link';
import { toast } from 'sonner';function PublishDuplicateContent() {
const params = useParams();
const router = useRouter();
const supabase = useSupabaseClient();
const copyId = params.copyId as string;
const slotId = params.slotId as string;const [slotData, setSlotData] = useState<any>(null);
const [loading, setLoading] = useState(true);
const { publishDuplicate, loading: publishing } = usePublishDuplicate();useEffect(() => {
fetchSlotData();
}, [copyId, slotId]);const fetchSlotData = async () => {
try {
// Get slot info for pre-filling
const { data: progressData } = await supabase.rpc('get_template_progress', {
p_copy_id: parseInt(copyId)
});  const slot = progressData?.find((s: any) => s.slot_id === slotId);  if (!slot || slot.status !== 'duplicate' || slot.count < 1) {
    toast.error('This slot is not available for publishing');
    router.back();
    return;
  }  setSlotData(slot);
} catch (error) {
  toast.error('Failed to load slot data');
  router.back();
} finally {
  setLoading(false);
}
};const handlePublish = async (formData: {
title: string;
description?: string;
sticker_number?: string;
collection_name?: string;
image_url?: string;
}) => {
try {
const listingId = await publishDuplicate(
parseInt(copyId),
parseInt(slotId),
formData
);  toast.success('Listing published successfully!');
  router.push(`/marketplace/${listingId}`);
} catch (error) {
  toast.error(error instanceof Error ? error.message : 'Failed to publish');
}
};if (loading) {
return (
<div className="min-h-screen bg-[#1F2937] flex items-center justify-center">
<div className="animate-spin h-12 w-12 border-4 border-[#FFC000] border-r-transparent rounded-full" />
</div>
);
}return (
<div className="min-h-screen bg-[#1F2937]">
<div className="container mx-auto px-4 py-8 max-w-2xl">
{/* Back Button */}
<Link href={/my-templates/${copyId}}>
<Button variant="ghost" className="mb-4 text-gray-400 hover:text-white">
<ArrowLeft className="mr-2 h-4 w-4" />
Back to Collection
</Button>
</Link>    {/* Header */}
    <div className="mb-6">
      <h1 className="text-3xl font-black uppercase text-white mb-2">
        Publish Duplicate
      </h1>
      <p className="text-gray-400">
        You have {slotData?.count} duplicates of this card
      </p>
    </div>    {/* Info Card */}
    <ModernCard className="mb-6">
      <ModernCardContent className="p-4 bg-blue-900/20 border-2 border-blue-700">
        <p className="text-sm text-blue-200">
          <strong>Note:</strong> Publishing will create a marketplace listing. 
          You can edit the details below. When someone buys it, your duplicate 
          count will automatically decrease.
        </p>
      </ModernCardContent>
    </ModernCard>    {/* Form */}
    <ListingForm
      initialData={{
        title: slotData?.label || 'Card',
        description: `I have ${slotData?.count} duplicates available.`,
        sticker_number: '',
        collection_name: '',
        image_url: ''
      }}
      onSubmit={handlePublish}
      loading={publishing}
    />
  </div>
</div>
);
}export default function PublishDuplicatePage() {
return (
<AuthGuard>
<PublishDuplicateContent />
</AuthGuard>
);
}

2. src/hooks/integration/usePublishDuplicate.ts
```typescriptimport { useState } from 'react';
import { useSupabaseClient } from '@/components/providers/SupabaseProvider';export function usePublishDuplicate() {
const supabase = useSupabaseClient();
const [loading, setLoading] = useState(false);const publishDuplicate = async (
copyId: number,
slotId: number,
customData?: {
title?: string;
description?: string;
sticker_number?: string;
collection_name?: string;
image_url?: string;
}
): Promise<string> => {
try {
setLoading(true);  // First, create the listing via RPC (which auto-fills from template)
  const { data, error } = await supabase.rpc('publish_duplicate_to_marketplace', {
    p_copy_id: copyId,
    p_slot_id: slotId
  });  if (error) throw error;
  if (!data) throw new Error('No listing ID returned');  const listingId = data.toString();  // If custom data provided, update the listing
  if (customData && Object.keys(customData).length > 0) {
    const updates: any = {};
    if (customData.title) updates.title = customData.title;
    if (customData.description) updates.description = customData.description;
    if (customData.sticker_number) updates.sticker_number = customData.sticker_number;
    if (customData.collection_name) updates.collection_name = customData.collection_name;
    if (customData.image_url) updates.image_url = customData.image_url;    const { error: updateError } = await supabase
      .from('trade_listings')
      .update(updates)
      .eq('id', listingId);    if (updateError) throw updateError;
  }  return listingId;
} catch (error) {
  throw error;
} finally {
  setLoading(false);
}
};return { publishDuplicate, loading };
}

FEATURES:
- Pre-filled form from slot data
- Editable before publishing
- Validation (check slot has duplicates)
- Info card explaining behavior
- Automatic redirect to listing
- Link back to collection

DELIVERABLES:
1. Publish duplicate page
2. usePublishDuplicate hook
3. Form pre-filling
4. Validation and error handling

Give me git commands afterwards.