Subtask 11.2: Create reports queue pagePrompt for Claude CLI:I need the reports queue page for moderating content.

CONTEXT:
- Lists pending reports with filters
- Shows report details with context
- Actions: dismiss, remove content, suspend user
- Backend RPCs: list_pending_reports, get_report_details_with_context, resolve_report

TASK:
Create the reports queue:

FILES TO CREATE:

1. src/app/admin/reports/page.tsx
```typescript'use client';import { useState } from 'react';
import { usePendingReports } from '@/hooks/admin/usePendingReports';
import { ReportDetailModal } from '@/components/admin/ReportDetailModal';
import { ModernCard, ModernCardContent } from '@/components/ui/modern-card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { AlertTriangle, Eye } from 'lucide-react';
import AdminGuard from '@/components/AdminGuard';function ReportsQueueContent() {
const { reports, loading, error, refetch } = usePendingReports();
const [selectedReportId, setSelectedReportId] = useState<string | null>(null);const formatDate = (dateString: string) => {
return new Date(dateString).toLocaleString();
};const getEntityTypeColor = (type: string) => {
switch (type) {
case 'user': return 'bg-red-500';
case 'listing': return 'bg-blue-500';
case 'template': return 'bg-purple-500';
case 'chat': return 'bg-green-500';
default: return 'bg-gray-500';
}
};if (loading) {
return (
<div className="min-h-screen bg-[#1F2937] flex items-center justify-center">
<div className="animate-spin h-12 w-12 border-4 border-[#FFC000] border-r-transparent rounded-full" />
</div>
);
}return (
<div className="min-h-screen bg-[#1F2937]">
<div className="container mx-auto px-4 py-8">
{/* Header */}
<div className="mb-8">
<h1 className="text-3xl font-black uppercase text-white mb-2">
Reports Queue
</h1>
<p className="text-gray-400">
Review and moderate reported content
</p>
</div>    {/* Error State */}
    {error && (
      <div className="text-red-500 text-center py-8">
        Error loading reports: {error}
      </div>
    )}    {/* Empty State */}
    {!error && reports.length === 0 && (
      <div className="text-center py-16">
        <AlertTriangle className="h-16 w-16 mx-auto mb-4 text-gray-600" />
        <p className="text-gray-400 text-lg">
          No pending reports
        </p>
        <p className="text-gray-500 text-sm mt-2">
          All caught up! üéâ
        </p>
      </div>
    )}    {/* Reports List */}
    <div className="space-y-4">
      {reports.map((report) => (
        <ModernCard key={report.report_id}>
          <ModernCardContent className="p-6">
            <div className="flex items-start gap-4">
              {/* Icon */}
              <div className="flex-shrink-0">
                <AlertTriangle className="h-8 w-8 text-red-500" />
              </div>              {/* Content */}
              <div className="flex-1 space-y-2">
                {/* Header */}
                <div className="flex items-start justify-between gap-4">
                  <div>
                    <div className="flex items-center gap-2 mb-1">
                      <Badge className={`${getEntityTypeColor(report.entity_type)} text-white uppercase text-xs`}>
                        {report.entity_type}
                      </Badge>
                      <Badge variant="outline" className="text-xs">
                        {report.reason}
                      </Badge>
                    </div>
                    <p className="text-white font-bold">
                      Reported by {report.reporter_nickname}
                    </p>
                  </div>                  <p className="text-sm text-gray-400 flex-shrink-0">
                    {formatDate(report.created_at)}
                  </p>
                </div>                {/* Description */}
                {report.description && (
                  <p className="text-gray-300 text-sm">
                    {report.description}
                  </p>
                )}                {/* Entity ID */}
                <p className="text-xs text-gray-500">
                  Entity ID: {report.entity_id}
                </p>                {/* Action */}
                <div className="pt-2">
                  <Button
                    size="sm"
                    onClick={() => setSelectedReportId(report.report_id)}
                    className="bg-[#FFC000] text-black hover:bg-[#FFD700]"
                  >
                    <Eye className="mr-2 h-4 w-4" />
                    Review Report
                  </Button>
                </div>
              </div>
            </div>
          </ModernCardContent>
        </ModernCard>
      ))}
    </div>    {/* Report Detail Modal */}
    {selectedReportId && (
      <ReportDetailModal
        reportId={selectedReportId}
        onClose={() => setSelectedReportId(null)}
        onResolved={refetch}
      />
    )}
  </div>
</div>
);
}export default function ReportsQueuePage() {
return (
<AdminGuard>
<ReportsQueueContent />
</AdminGuard>
);
}

2. src/components/admin/ReportDetailModal.tsx
```typescript'use client';import { useEffect, useState } from 'react';
import {
Dialog,
DialogContent,
DialogHeader,
DialogTitle,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { useReportDetails } from '@/hooks/admin/useReportDetails';
import { useResolveReport } from '@/hooks/admin/useResolveReport';
import { toast } from 'sonner';
import { AlertTriangle, X, Trash, Ban } from 'lucide-react';interface ReportDetailModalProps {
reportId: string;
onClose: () => void;
onResolved: () => void;
}export function ReportDetailModal({ reportId, onClose, onResolved }: ReportDetailModalProps) {
const { details, loading, error } = useReportDetails(reportId);
const { resolveReport, loading: resolving } = useResolveReport();
const [adminNotes, setAdminNotes] = useState('');
const [confirming, setConfirming] = useState<string | null>(null);const handleResolve = async (action: 'dismiss' | 'remove_content' | 'suspend_user') => {
if (confirming !== action) {
setConfirming(action);
return;
}if (!adminNotes.trim()) {
  toast.error('Please provide a reason for this action');
  return;
}try {
  await resolveReport(reportId, action, adminNotes);
  toast.success('Report resolved successfully');
  onResolved();
  onClose();
} catch (error) {
  toast.error('Failed to resolve report');
} finally {
  setConfirming(null);
}
};if (loading) {
return (
<Dialog open={true} onOpenChange={onClose}>
<DialogContent className="bg-[#1F2937] border-2 border-black max-w-3xl">
<div className="flex items-center justify-center py-8">
<div className="animate-spin h-8 w-8 border-4 border-[#FFC000] border-r-transparent rounded-full" />
</div>
</DialogContent>
</Dialog>
);
}if (error || !details) {
return (
<Dialog open={true} onOpenChange={onClose}>
<DialogContent className="bg-[#1F2937] border-2 border-black">
<div className="text-center py-8">
<p className="text-red-500">Failed to load report details</p>
</div>
</DialogContent>
</Dialog>
);
}const report = details.report;
const content = details.reported_content;
const history = details.reported_user_history;return (
<Dialog open={true} onOpenChange={onClose}>
<DialogContent className="bg-[#1F2937] border-2 border-black max-w-3xl max-h-[90vh] overflow-y-auto">
<DialogHeader>
<DialogTitle className="text-white flex items-center gap-2">
<AlertTriangle className="h-5 w-5 text-red-500" />
Report Details
</DialogTitle>
</DialogHeader>    <div className="space-y-6">
      {/* Report Info */}
      <div className="space-y-2">
        <div className="flex items-center gap-2">
          <Badge className="bg-blue-500 text-white">
            {report.entity_type}
          </Badge>
          <Badge variant="outline">
            {report.reason}
          </Badge>
        </div>
        <p className="text-gray-400 text-sm">
          Reported by <span className="text-white font-bold">{report.reporter_nickname}</span>
          {' '}on {new Date(report.created_at).toLocaleString()}
        </p>
        {report.description && (
          <div className="bg-[#374151] p-3 rounded-md">
            <p className="text-gray-300 text-sm">{report.description}</p>
          </div>
        )}
      </div>      {/* Reported Content */}
      <div className="border-2 border-gray-700 rounded-md p-4 space-y-3">
        <h3 className="font-bold text-white">Reported Content</h3>        {report.entity_type === 'user' && content.nickname && (
          <div className="space-y-2">
            <p className="text-gray-300">
              <span className="text-gray-400">User:</span> {content.nickname}
            </p>
            <p className="text-gray-300">
              <span className="text-gray-400">Email:</span> {content.email}
            </p>
            <p className="text-gray-300">
              <span className="text-gray-400">Rating:</span> {content.rating_avg?.toFixed(1) || '0.0'} ‚≠ê
            </p>
            {content.is_suspended && (
              <Badge className="bg-red-600 text-white">Suspended</Badge>
            )}
          </div>
        )}        {report.entity_type === 'listing' && content.title && (
          <div className="space-y-2">
            <p className="text-gray-300">
              <span className="text-gray-400">Title:</span> {content.title}
            </p>
            {content.description && (
              <p className="text-gray-300 text-sm">{content.description}</p>
            )}
            <p className="text-gray-300">
              <span className="text-gray-400">Status:</span> {content.status}
            </p>
            <p className="text-gray-300">
              <span className="text-gray-400">By:</span> {content.user_nickname}
            </p>
          </div>
        )}        {report.entity_type === 'template' && content.title && (
          <div className="space-y-2">
            <p className="text-gray-300">
              <span className="text-gray-400">Title:</span> {content.title}
            </p>
            <p className="text-gray-300">
              <span className="text-gray-400">Author:</span> {content.author_nickname}
            </p>
            <p className="text-gray-300">
              <span className="text-gray-400">Rating:</span> {content.rating_avg?.toFixed(1) || '0.0'} ‚≠ê
            </p>
            <p className="text-gray-300">
              <span className="text-gray-400">Public:</span> {content.is_public ? 'Yes' : 'No'}
            </p>
          </div>
        )}
      </div>      {/* User History (if applicable) */}
      {history && (
        <div className="border-2 border-gray-700 rounded-md p-4 space-y-2">
          <h3 className="font-bold text-white">User History</h3>
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div>
              <p className="text-gray-400">Total Reports Received</p>
              <p className="text-white font-bold">{history.total_reports_received}</p>
            </div>
            <div>
              <p className="text-gray-400">Total Listings</p>
              <p className="text-white font-bold">{history.total_listings}</p>
            </div>
            <div>
              <p className="text-gray-400">Templates Created</p>
              <p className="text-white font-bold">{history.total_templates_created}</p>
            </div>
            <div>
              <p className="text-gray-400">Rating Average</p>
              <p className="text-white font-bold">{history.rating_avg?.toFixed(1) || '0.0'}</p>
            </div>
          </div>
        </div>
      )}      {/* Admin Notes */}
      <div className="space-y-2">
        <Label htmlFor="notes" className="text-white">
          Admin Notes (Required)
        </Label>
        <Textarea
          id="notes"
          value={adminNotes}
          onChange={(e) => setAdminNotes(e.target.value)}
          placeholder="Explain your decision..."
          rows={3}
          className="bg-[#374151] border-2 border-black text-white"
        />
      </div>      {/* Actions */}
      <div className="flex flex-col gap-2">
        <Button
          onClick={() => handleResolve('dismiss')}
          disabled={resolving || !adminNotes.trim()}
          variant="outline"
          className="w-full"
        >
          <X className="mr-2 h-4 w-4" />
          {confirming === 'dismiss' ? 'Click again to confirm' : 'Dismiss Report'}
        </Button>        <Button
          onClick={() => handleResolve('remove_content')}
          disabled={resolving || !adminNotes.trim()}
          className="w-full bg-orange-600 hover:bg-orange-700"
        >
          <Trash className="mr-2 h-4 w-4" />
          {confirming === 'remove_content' ? 'Click again to confirm' : 'Remove Content'}
        </Button>        <Button
          onClick={() => handleResolve('suspend_user')}
          disabled={resolving || !adminNotes.trim()}
          className="w-full bg-red-600 hover:bg-red-700"
        >
          <Ban className="mr-2 h-4 w-4" />
          {confirming === 'suspend_user' ? 'Click again to confirm' : 'Suspend User'}
        </Button>
      </div>
    </div>
  </DialogContent>
</Dialog>
);
}

3. src/hooks/admin/usePendingReports.ts
```typescriptimport { useState, useEffect, useCallback } from 'react';
import { useSupabaseClient } from '@/components/providers/SupabaseProvider';interface PendingReport {
report_id: string;
reporter_nickname: string;
entity_type: string;
entity_id: string;
reason: string;
description: string | null;
created_at: string;
}export function usePendingReports() {
const supabase = useSupabaseClient();
const [reports, setReports] = useState<PendingReport[]>([]);
const [loading, setLoading] = useState(true);
const [error, setError] = useState<string | null>(null);const fetchReports = useCallback(async () => {
try {
setLoading(true);  const { data, error: rpcError } = await supabase.rpc('list_pending_reports', {
    p_limit: 50,
    p_offset: 0
  });  if (rpcError) throw rpcError;  setReports(data || []);
} catch (err) {
  setError(err instanceof Error ? err.message : 'Unknown error');
} finally {
  setLoading(false);
}
}, [supabase]);useEffect(() => {
fetchReports();
}, [fetchReports]);return { reports, loading, error, refetch: fetchReports };
}

4. src/hooks/admin/useReportDetails.ts
```typescriptimport { useState, useEffect } from 'react';
import { useSupabaseClient } from '@/components/providers/SupabaseProvider';export function useReportDetails(reportId: string) {
const supabase = useSupabaseClient();
const [details, setDetails] = useState<any>(null);
const [loading, setLoading] = useState(true);
const [error, setError] = useState<string | null>(null);useEffect(() => {
fetchDetails();
}, [reportId]);const fetchDetails = async () => {
try {
setLoading(true);  const { data, error: rpcError } = await supabase.rpc('get_report_details_with_context', {
    p_report_id: parseInt(reportId)
  });  if (rpcError) throw rpcError;  setDetails(data);
} catch (err) {
  setError(err instanceof Error ? err.message : 'Unknown error');
} finally {
  setLoading(false);
}
};return { details, loading, error };
}

5. src/hooks/admin/useResolveReport.ts
```typescriptimport { useState } from 'react';
import { useSupabaseClient } from '@/components/providers/SupabaseProvider';export function useResolveReport() {
const supabase = useSupabaseClient();
const [loading, setLoading] = useState(false);const resolveReport = async (
reportId: string,
action: 'dismiss' | 'remove_content' | 'suspend_user',
adminNotes: string
): Promise<void> => {
try {
setLoading(true);  const { error } = await supabase.rpc('resolve_report', {
    p_report_id: parseInt(reportId),
    p_action: action,
    p_admin_notes: adminNotes
  });  if (error) throw error;
} catch (error) {
  throw error;
} finally {
  setLoading(false);
}
};return { resolveReport, loading };
}

FEATURES:
- List of pending reports with details
- Entity type badges (color-coded)
- Report reason display
- Review button opens detail modal
- Detail modal with complete context
- User history for context
- Three actions: dismiss, remove, suspend
- Required admin notes
- Confirm dialogs for actions
- Empty state when no reports

DELIVERABLES:
1. Reports queue page
2. ReportDetailModal with context
3. usePendingReports hook
4. useReportDetails hook
5. useResolveReport hook

Give me git commands afterwards.