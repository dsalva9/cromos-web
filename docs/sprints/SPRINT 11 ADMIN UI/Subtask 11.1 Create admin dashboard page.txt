
## ðŸ“¦ Subtask 11.1: Create admin dashboard page

### Prompt for Claude CLI:
````
I need the admin dashboard with statistics and charts.

CONTEXT:
- Shows key metrics: users, listings, reports, etc.
- Charts/visualizations for trends
- Admin-only access with guard
- Backend RPC: get_admin_stats

TASK:
Create the admin dashboard:

FILES TO CREATE:

1. src/app/admin/dashboard/page.tsx
````typescript
'use client';

import { useAdminStats } from '@/hooks/admin/useAdminStats';
import { ModernCard, ModernCardContent } from '@/components/ui/modern-card';
import { 
  Users, 
  Package, 
  FileText, 
  AlertTriangle, 
  CheckCircle,
  TrendingUp 
} from 'lucide-react';
import AdminGuard from '@/components/AdminGuard';

function AdminDashboardContent() {
  const { stats, loading, error } = useAdminStats();

  if (loading) {
    return (
      <div className="min-h-screen bg-[#1F2937] flex items-center justify-center">
        <div className="animate-spin h-12 w-12 border-4 border-[#FFC000] border-r-transparent rounded-full" />
      </div>
    );
  }

  if (error || !stats) {
    return (
      <div className="min-h-screen bg-[#1F2937] flex items-center justify-center">
        <div className="text-center">
          <p className="text-red-500 text-xl mb-4">Failed to load dashboard</p>
          <p className="text-gray-400">{error}</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-[#1F2937]">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-black uppercase text-white mb-2">
            Admin Dashboard
          </h1>
          <p className="text-gray-400">
            Platform overview and statistics
          </p>
        </div>

        {/* Stats Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          {/* Total Users */}
          <ModernCard>
            <ModernCardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-gray-400 text-sm mb-1">Total Users</p>
                  <p className="text-3xl font-black text-white">
                    {stats.total_users}
                  </p>
                </div>
                <Users className="h-12 w-12 text-[#FFC000]" />
              </div>
            </ModernCardContent>
          </ModernCard>

          {/* Active Users (30d) */}
          <ModernCard>
            <ModernCardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-gray-400 text-sm mb-1">Active Users (30d)</p>
                  <p className="text-3xl font-black text-white">
                    {stats.active_users_last_30_days}
                  </p>
                </div>
                <TrendingUp className="h-12 w-12 text-green-500" />
              </div>
            </ModernCardContent>
          </ModernCard>

          {/* Pending Reports */}
          <ModernCard>
            <ModernCardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-gray-400 text-sm mb-1">Pending Reports</p>
                  <p className="text-3xl font-black text-white">
                    {stats.pending_reports}
                  </p>
                </div>
                <AlertTriangle className={`h-12 w-12 ${stats.pending_reports > 0 ? 'text-red-500' : 'text-gray-600'}`} />
              </div>
            </ModernCardContent>
          </ModernCard>

          {/* Active Listings */}
          <ModernCard>
            <ModernCardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-gray-400 text-sm mb-1">Active Listings</p>
                  <p className="text-3xl font-black text-white">
                    {stats.active_listings}
                  </p>
                </div>
                <Package className="h-12 w-12 text-blue-500" />
              </div>
            </ModernCardContent>
          </ModernCard>
        </div>

        {/* Secondary Stats */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {/* Public Templates */}
          <ModernCard>
            <ModernCardContent className="p-6">
              <div className="flex items-center gap-4">
                <FileText className="h-10 w-10 text-purple-500" />
                <div>
                  <p className="text-gray-400 text-sm">Public Templates</p>
                  <p className="text-2xl font-black text-white">
                    {stats.public_templates}
                  </p>
                </div>
              </div>
            </ModernCardContent>
          </ModernCard>

          {/* Completed Trades (30d) */}
          <ModernCard>
            <ModernCardContent className="p-6">
              <div className="flex items-center gap-4">
                <CheckCircle className="h-10 w-10 text-green-500" />
                <div>
                  <p className="text-gray-400 text-sm">Completed Trades (30d)</p>
                  <p className="text-2xl font-black text-white">
                    {stats.completed_trades_last_30_days}
                  </p>
                </div>
              </div>
            </ModernCardContent>
          </ModernCard>

          {/* Admin Actions (30d) */}
          <ModernCard>
            <ModernCardContent className="p-6">
              <div className="flex items-center gap-4">
                <AlertTriangle className="h-10 w-10 text-orange-500" />
                <div>
                  <p className="text-gray-400 text-sm">Admin Actions (30d)</p>
                  <p className="text-2xl font-black text-white">
                    {stats.total_admin_actions_last_30_days}
                  </p>
                </div>
              </div>
            </ModernCardContent>
          </ModernCard>
        </div>

        {/* Suspended Users Alert */}
        {stats.suspended_users > 0 && (
          <ModernCard className="mt-6 border-2 border-red-700">
            <ModernCardContent className="p-4 bg-red-900/20">
              <div className="flex items-center gap-3">
                <AlertTriangle className="h-6 w-6 text-red-400" />
                <div>
                  <p className="text-red-200 font-bold">
                    {stats.suspended_users} suspended {stats.suspended_users === 1 ? 'user' : 'users'}
                  </p>
                  <p className="text-red-300 text-sm">
                    Review suspended accounts in the Users tab
                  </p>
                </div>
              </div>
            </ModernCardContent>
          </ModernCard>
        )}
      </div>
    </div>
  );
}

export default function AdminDashboardPage() {
  return (
    <AdminGuard>
      <AdminDashboardContent />
    </AdminGuard>
  );
}
````

2. src/components/AdminGuard.tsx
````typescript
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { useUser, useSupabaseClient } from '@/components/providers/SupabaseProvider';
import { toast } from 'sonner';

export default function AdminGuard({ children }: { children: React.ReactNode }) {
  const { user, loading: userLoading } = useUser();
  const supabase = useSupabaseClient();
  const router = useRouter();
  const [isAdmin, setIsAdmin] = useState(false);
  const [checking, setChecking] = useState(true);

  useEffect(() => {
    checkAdmin();
  }, [user]);

  const checkAdmin = async () => {
    if (userLoading) return;

    if (!user) {
      toast.error('You must be logged in');
      router.push('/login');
      return;
    }

    try {
      const { data, error } = await supabase
        .from('profiles')
        .select('is_admin')
        .eq('id', user.id)
        .single();

      if (error) throw error;

      if (!data?.is_admin) {
        toast.error('Admin access required');
        router.push('/');
        return;
      }

      setIsAdmin(true);
    } catch (error) {
      toast.error('Failed to verify admin access');
      router.push('/');
    } finally {
      setChecking(false);
    }
  };

  if (userLoading || checking) {
    return (
      <div className="min-h-screen bg-[#1F2937] flex items-center justify-center">
        <div className="animate-spin h-12 w-12 border-4 border-[#FFC000] border-r-transparent rounded-full" />
      </div>
    );
  }

  if (!isAdmin) {
    return null;
  }

  return <>{children}</>;
}
````

3. src/hooks/admin/useAdminStats.ts
````typescript
import { useState, useEffect } from 'react';
import { useSupabaseClient } from '@/components/providers/SupabaseProvider';

interface AdminStats {
  total_users: number;
  active_users_last_30_days: number;
  suspended_users: number;
  pending_reports: number;
  active_listings: number;
  public_templates: number;
  completed_trades_last_30_days: number;
  total_admin_actions_last_30_days: number;
}

export function useAdminStats() {
  const supabase = useSupabaseClient();
  const [stats, setStats] = useState<AdminStats | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    fetchStats();
  }, []);

  const fetchStats = async () => {
    try {
      setLoading(true);

      const { data, error: rpcError } = await supabase.rpc('get_admin_stats');

      if (rpcError) throw rpcError;

      setStats(data);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Unknown error');
    } finally {
      setLoading(false);
    }
  };

  return { stats, loading, error, refetch: fetchStats };
}
````

FEATURES:
- Key metrics in cards
- Color-coded stats
- Icons for visual clarity
- Suspended users alert
- 30-day activity metrics
- Admin-only access guard
- Responsive grid layout

DELIVERABLES:
1. Admin dashboard page
2. AdminGuard component
3. useAdminStats hook
4. Stats cards with icons

Give me git commands afterwards.