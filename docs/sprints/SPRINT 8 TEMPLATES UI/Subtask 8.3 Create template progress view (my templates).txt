
## ðŸ“¦ Subtask 8.3: Create template progress view (my templates)

### Prompt for Claude CLI:
```
I need the template progress view where users track their collection.

CONTEXT:
- Grid of slots similar to album pages
- Each slot shows status: missing/owned/duplicate
- Click slot to update status
- Count for duplicates
- Publish duplicates to marketplace button

TASK:
Create the template progress view:

FILES TO CREATE:

1. src/app/my-templates/[copyId]/page.tsx
```typescript
'use client';

import { useParams } from 'next/navigation';
import { useTemplateProgress } from '@/hooks/templates/useTemplateProgress';
import { TemplateProgressGrid } from '@/components/templates/TemplateProgressGrid';
import { TemplateSummaryHeader } from '@/components/templates/TemplateSummaryHeader';
import AuthGuard from '@/components/AuthGuard';
import { Button } from '@/components/ui/button';
import { ArrowLeft } from 'lucide-react';
import Link from 'next/link';

function TemplateProgressContent() {
  const params = useParams();
  const copyId = params.copyId as string;
  
  const { 
    copy, 
    progress, 
    loading, 
    error, 
    updateSlotStatus 
  } = useTemplateProgress(copyId);

  if (loading) {
    return (
      <div className="min-h-screen bg-[#1F2937] flex items-center justify-center">
        <div className="animate-spin h-12 w-12 border-4 border-[#FFC000] border-r-transparent rounded-full" />
      </div>
    );
  }

  if (error || !copy) {
    return (
      <div className="min-h-screen bg-[#1F2937] flex items-center justify-center">
        <div className="text-center">
          <p className="text-white text-xl mb-4">Template not found</p>
          <Link href="/my-templates">
            <Button>Back to My Templates</Button>
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-[#1F2937]">
      <div className="container mx-auto px-4 py-8">
        {/* Back Button */}
        <Link href="/my-templates">
          <Button variant="ghost" className="mb-4 text-gray-400 hover:text-white">
            <ArrowLeft className="mr-2 h-4 w-4" />
            Back to My Templates
          </Button>
        </Link>

        {/* Summary Header */}
        <TemplateSummaryHeader 
          copy={copy}
          progress={progress}
        />

        {/* Progress Grid */}
        <TemplateProgressGrid
          progress={progress}
          onUpdateSlot={updateSlotStatus}
          copyId={copyId}
        />
      </div>
    </div>
  );
}

export default function TemplateProgressPage() {
  return (
    <AuthGuard>
      <TemplateProgressContent />
    </AuthGuard>
  );
}
```

2. src/components/templates/TemplateProgressGrid.tsx
```typescript
'use client';

import { useState, useMemo } from 'react';
import { SlotTile } from '@/components/templates/SlotTile';
import { ModernCard, ModernCardContent } from '@/components/ui/modern-card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';

interface SlotProgress {
  slot_id: string;
  page_id: string;
  page_number: number;
  slot_number: number;
  label: string | null;
  is_special: boolean;
  status: 'missing' | 'owned' | 'duplicate';
  count: number;
}

interface TemplateProgressGridProps {
  progress: SlotProgress[];
  onUpdateSlot: (slotId: string, status: string, count: number) => Promise<void>;
  copyId: string;
}

export function TemplateProgressGrid({ progress, onUpdateSlot, copyId }: TemplateProgressGridProps) {
  const [selectedPage, setSelectedPage] = useState<number>(1);

  // Group slots by page
  const pageGroups = useMemo(() => {
    const groups = progress.reduce((acc, slot) => {
      if (!acc[slot.page_number]) {
        acc[slot.page_number] = [];
      }
      acc[slot.page_number].push(slot);
      return acc;
    }, {} as Record<number, SlotProgress[]>);

    // Sort slots within each page by slot_number
    Object.values(groups).forEach(slots => {
      slots.sort((a, b) => a.slot_number - b.slot_number);
    });

    return groups;
  }, [progress]);

  const pageNumbers = Object.keys(pageGroups)
    .map(Number)
    .sort((a, b) => a - b);

  return (
    <div className="space-y-6">
      {/* Page Tabs */}
      <ModernCard>
        <ModernCardContent className="p-4">
          <Tabs value={selectedPage.toString()} onValueChange={(v) => setSelectedPage(Number(v))}>
            <TabsList className="w-full flex-wrap h-auto">
              {pageNumbers.map(pageNum => (
                <TabsTrigger 
                  key={pageNum} 
                  value={pageNum.toString()}
                  className="flex-1 min-w-[100px]"
                >
                  Page {pageNum}
                </TabsTrigger>
              ))}
            </TabsList>
          </Tabs>
        </ModernCardContent>
      </ModernCard>

      {/* Grid */}
      <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
        {pageGroups[selectedPage]?.map(slot => (
          <SlotTile
            key={slot.slot_id}
            slot={slot}
            onUpdate={onUpdateSlot}
            copyId={copyId}
          />
        ))}
      </div>
    </div>
  );
}
```

3. src/components/templates/SlotTile.tsx
```typescript
'use client';

import { useState } from 'react';
import { ModernCard, ModernCardContent } from '@/components/ui/modern-card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Minus, Plus, Upload } from 'lucide-react';
import { cn } from '@/lib/utils';
import { toast } from 'sonner';
import Link from 'next/link';

interface SlotProgress {
  slot_id: string;
  label: string | null;
  is_special: boolean;
  status: 'missing' | 'owned' | 'duplicate';
  count: number;
}

interface SlotTileProps {
  slot: SlotProgress;
  onUpdate: (slotId: string, status: string, count: number) => Promise<void>;
copyId: string;
}export function SlotTile({ slot, onUpdate, copyId }: SlotTileProps) {
const [updating, setUpdating] = useState(false);
const [localCount, setLocalCount] = useState(slot.count);const getStatusColor = () => {
switch (slot.status) {
case 'missing': return 'bg-gray-700 border-gray-600';
case 'owned': return 'bg-green-900 border-green-700';
case 'duplicate': return 'bg-[#FFC000] border-[#FFD700]';
default: return 'bg-gray-700';
}
};const handleStatusClick = async () => {
const statusCycle = {
missing: 'owned',
owned: 'duplicate',
duplicate: 'missing'
} as const;const newStatus = statusCycle[slot.status];
const newCount = newStatus === 'duplicate' ? 2 : 0;try {
  setUpdating(true);
  await onUpdate(slot.slot_id, newStatus, newCount);
  setLocalCount(newCount);
  toast.success('Updated!');
} catch (error) {
  toast.error('Failed to update');
} finally {
  setUpdating(false);
}
};const handleCountChange = async (delta: number) => {
if (slot.status !== 'duplicate') return;const newCount = Math.max(1, localCount + delta);try {
  setUpdating(true);
  await onUpdate(slot.slot_id, 'duplicate', newCount);
  setLocalCount(newCount);
} catch (error) {
  toast.error('Failed to update count');
} finally {
  setUpdating(false);
}
};return (
<ModernCard className={cn('relative', getStatusColor())}>
<ModernCardContent className="p-3 space-y-2">
{/* Label */}
<div className="text-center">
<p className="text-xs font-bold text-white line-clamp-2 min-h-[2rem]">
{slot.label || Slot ${slot.slot_id.slice(-4)}}
</p>
</div>    {/* Status Badge */}
    <div className="text-center">
      <Badge
        variant="outline"
        className={cn(
          'cursor-pointer uppercase text-xs font-bold',
          slot.status === 'missing' && 'bg-gray-800 text-gray-300',
          slot.status === 'owned' && 'bg-green-800 text-green-200',
          slot.status === 'duplicate' && 'bg-black text-[#FFC000]'
        )}
        onClick={handleStatusClick}
      >
        {slot.status}
      </Badge>
    </div>    {/* Count Controls (only for duplicates) */}
    {slot.status === 'duplicate' && (
      <div className="space-y-2">
        <div className="flex items-center justify-center gap-2">
          <Button
            size="sm"
            variant="outline"
            onClick={() => handleCountChange(-1)}
            disabled={updating || localCount <= 1}
            className="h-6 w-6 p-0"
          >
            <Minus className="h-3 w-3" />
          </Button>
          <span className="text-white font-bold w-8 text-center">
            {localCount}
          </span>
          <Button
            size="sm"
            variant="outline"
            onClick={() => handleCountChange(1)}
            disabled={updating}
            className="h-6 w-6 p-0"
          >
            <Plus className="h-3 w-3" />
          </Button>
        </div>        {/* Publish Button */}
        <Link href={`/my-templates/${copyId}/publish/${slot.slot_id}`}>
          <Button
            size="sm"
            className="w-full bg-[#FFC000] text-black hover:bg-[#FFD700] text-xs h-7"
          >
            <Upload className="mr-1 h-3 w-3" />
            Publish
          </Button>
        </Link>
      </div>
    )}    {/* Loading Overlay */}
    {updating && (
      <div className="absolute inset-0 bg-black/50 flex items-center justify-center rounded-md">
        <div className="animate-spin h-4 w-4 border-2 border-white border-r-transparent rounded-full" />
      </div>
    )}
  </ModernCardContent>
</ModernCard>
);
}

4. src/hooks/templates/useTemplateProgress.ts
```typescriptimport { useState, useEffect, useCallback } from 'react';
import { useSupabaseClient } from '@/components/providers/SupabaseProvider';interface TemplateCopy {
copy_id: string;
template_id: string;
title: string;
is_active: boolean;
copied_at: string;
original_author_nickname: string;
completed_slots: number;
total_slots: number;
}interface SlotProgress {
slot_id: string;
page_id: string;
page_number: number;
slot_number: number;
label: string | null;
is_special: boolean;
status: 'missing' | 'owned' | 'duplicate';
count: number;
}export function useTemplateProgress(copyId: string) {
const supabase = useSupabaseClient();
const [copy, setCopy] = useState<TemplateCopy | null>(null);
const [progress, setProgress] = useState<SlotProgress[]>([]);
const [loading, setLoading] = useState(true);
const [error, setError] = useState<string | null>(null);const fetchProgress = useCallback(async () => {
try {
setLoading(true);  // Get copy info
  const { data: copyData, error: copyError } = await supabase.rpc('get_my_template_copies');  if (copyError) throw copyError;  const currentCopy = copyData?.find((c: any) => c.copy_id.toString() === copyId);
  if (!currentCopy) throw new Error('Template copy not found');  setCopy(currentCopy);  // Get progress
  const { data: progressData, error: progressError } = await supabase.rpc('get_template_progress', {
    p_copy_id: parseInt(copyId)
  });  if (progressError) throw progressError;  setProgress(progressData || []);
} catch (err) {
  setError(err instanceof Error ? err.message : 'Unknown error');
} finally {
  setLoading(false);
}
}, [supabase, copyId]);useEffect(() => {
fetchProgress();
}, [fetchProgress]);const updateSlotStatus = useCallback(async (
slotId: string,
status: string,
count: number
) => {
try {
const { error: updateError } = await supabase.rpc('update_template_progress', {
p_copy_id: parseInt(copyId),
p_slot_id: parseInt(slotId),
p_status: status,
p_count: count
});  if (updateError) throw updateError;  // Optimistic update
  setProgress(prev => prev.map(slot => 
    slot.slot_id === slotId 
      ? { ...slot, status: status as any, count }
      : slot
  ));  // Update copy stats
  setCopy(prev => {
    if (!prev) return prev;
    const completed = progress.filter(s => 
      s.slot_id === slotId ? status !== 'missing' : s.status !== 'missing'
    ).length;
    return { ...prev, completed_slots: completed };
  });
} catch (err) {
  throw err;
}
}, [supabase, copyId, progress]);return { copy, progress, loading, error, updateSlotStatus, refetch: fetchProgress };
}

FEATURES:
- Grid of slots grouped by pages
- Page tabs for navigation
- Slot status: missing/owned/duplicate
- Click to cycle status
- Count controls for duplicates
- Publish button for duplicates
- Optimistic updates
- Loading states

DELIVERABLES:
1. Template progress page
2. TemplateProgressGrid with page tabs
3. SlotTile with status controls
4. useTemplateProgress hook

Give me git commands afterwards.