## ðŸ“¦ Subtask 10.4: Create report button and modal

### Prompt for Claude CLI:

I need a universal report button and modal for content moderation.
CONTEXT:

Can report: users, listings, templates
Report categories: spam, inappropriate, scam, etc.
Optional description
Backend RPC: create_report

TASK:
Create report components:
FILES TO CREATE:

src/components/social/ReportButton.tsx

typescript'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Flag } from 'lucide-react';
import { ReportModal } from './ReportModal';

interface ReportButtonProps {
  entityType: 'user' | 'listing' | 'template' | 'chat';
  entityId: string;
  variant?: 'default' | 'outline' | 'ghost';
  size?: 'default' | 'sm' | 'lg';
}

export function ReportButton({ 
  entityType, 
  entityId, 
  variant = 'outline',
  size = 'sm'
}: ReportButtonProps) {
  const [open, setOpen] = useState(false);

  return (
    <>
      <Button
        variant={variant}
        size={size}
        onClick={() => setOpen(true)}
        className="text-gray-400 hover:text-red-500"
      >
        <Flag className="h-4 w-4 mr-2" />
        Report
      </Button>

      <ReportModal
        open={open}
        onClose={() => setOpen(false)}
        entityType={entityType}
        entityId={entityId}
      />
    </>
  );
}

src/components/social/ReportModal.tsx

typescript'use client';

import { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { useReport } from '@/hooks/social/useReport';
import { toast } from 'sonner';

interface ReportModalProps {
  open: boolean;
  onClose: () => void;
  entityType: 'user' | 'listing' | 'template' | 'chat';
  entityId: string;
}

const REPORT_REASONS = [
  { value: 'spam', label: 'Spam or misleading' },
  { value: 'inappropriate', label: 'Inappropriate content' },
  { value: 'scam', label: 'Scam or fraud' },
  { value: 'harassment', label: 'Harassment or abuse' },
{ value: 'fake', label: 'Fake or counterfeit items' },
{ value: 'other', label: 'Other' },
];export function ReportModal({ open, onClose, entityType, entityId }: ReportModalProps) {
const [reason, setReason] = useState('');
const [description, setDescription] = useState('');
const { submitReport, loading } = useReport();const handleSubmit = async (e: React.FormEvent) => {
e.preventDefault();if (!reason) {
  toast.error('Please select a reason');
  return;
}try {
  await submitReport(entityType, entityId, reason, description);
  toast.success('Report submitted successfully. Our team will review it.');
  onClose();
  // Reset form
  setReason('');
  setDescription('');
} catch (error) {
  toast.error(error instanceof Error ? error.message : 'Failed to submit report');
}
};return (
<Dialog open={open} onOpenChange={onClose}>
<DialogContent className="bg-[#1F2937] border-2 border-black">
<DialogHeader>
<DialogTitle className="text-white">Report Content</DialogTitle>
<DialogDescription className="text-gray-400">
Help us maintain a safe community by reporting inappropriate content.
</DialogDescription>
</DialogHeader>    <form onSubmit={handleSubmit} className="space-y-6">
      {/* Reason */}
      <div className="space-y-3">
        <Label className="text-white">Why are you reporting this?</Label>
        <RadioGroup value={reason} onValueChange={setReason}>
          {REPORT_REASONS.map((option) => (
            <div key={option.value} className="flex items-center space-x-2">
              <RadioGroupItem value={option.value} id={option.value} />
              <Label 
                htmlFor={option.value} 
                className="text-gray-300 cursor-pointer"
              >
                {option.label}
              </Label>
            </div>
          ))}
        </RadioGroup>
      </div>      {/* Description */}
      <div className="space-y-2">
        <Label htmlFor="description" className="text-white">
          Additional details (optional)
        </Label>
        <Textarea
          id="description"
          value={description}
          onChange={(e) => setDescription(e.target.value)}
          placeholder="Provide any additional information..."
          rows={4}
          className="bg-[#374151] border-2 border-black text-white"
        />
        <p className="text-sm text-gray-400">
          {description.length} / 500 characters
        </p>
      </div>      {/* Actions */}
      <div className="flex gap-3">
        <Button
          type="button"
          variant="outline"
          onClick={onClose}
          className="flex-1"
        >
          Cancel
        </Button>
        <Button
          type="submit"
          disabled={loading || !reason}
          className="flex-1 bg-red-600 hover:bg-red-700 text-white"
        >
          {loading ? 'Submitting...' : 'Submit Report'}
        </Button>
      </div>
    </form>
  </DialogContent>
</Dialog>
);
}

3. src/hooks/social/useReport.ts
```typescriptimport { useState } from 'react';
import { useSupabaseClient } from '@/components/providers/SupabaseProvider';export function useReport() {
const supabase = useSupabaseClient();
const [loading, setLoading] = useState(false);const submitReport = async (
entityType: string,
entityId: string,
reason: string,
description?: string
): Promise<void> => {
try {
setLoading(true);  const { data, error } = await supabase.rpc('create_report', {
    p_entity_type: entityType,
    p_entity_id: parseInt(entityId),
    p_reason: reason,
    p_description: description || null
  });  if (error) throw error;
} catch (error) {
  throw error;
} finally {
  setLoading(false);
}
};return { submitReport, loading };
}

FEATURES:
- Modal with report form
- Radio buttons for reason selection
- Optional description textarea
- Character counter
- Validation (reason required)
- Loading state
- Success/error feedback
- Reusable for any content type

DELIVERABLES:
1. ReportButton component
2. ReportModal with form
3. useReport hook
4. Multiple report reasons

Give me git commands afterwards.
