Subtask 6.5.3: Create base UI componentsPrompt for Claude CLI:I need to create all base UI components used throughout the app.

CONTEXT:
- Shadcn/ui-style components with our custom theme
- ModernCard with thick black borders
- All form controls with consistent styling
- Based on Radix UI primitives

TASK:
Create base UI component library:

FILES TO CREATE:

1. src/components/ui/modern-card.tsx
```typescriptimport * as React from 'react';
import { cn } from '@/lib/utils';const ModernCard = React.forwardRef
HTMLDivElement,
React.HTMLAttributes<HTMLDivElement>

(({ className, ...props }, ref) => (

  <div
    ref={ref}
    className={cn(
      'rounded-lg border-2 border-black bg-[#374151] shadow-lg',
      className
    )}
    {...props}
  />
));
ModernCard.displayName = 'ModernCard';const ModernCardHeader = React.forwardRef
HTMLDivElement,
React.HTMLAttributes<HTMLDivElement>

(({ className, ...props }, ref) => (

  <div
    ref={ref}
    className={cn('flex flex-col space-y-1.5 p-6', className)}
    {...props}
  />
));
ModernCardHeader.displayName = 'ModernCardHeader';const ModernCardTitle = React.forwardRef
HTMLParagraphElement,
React.HTMLAttributes<HTMLHeadingElement>

(({ className, ...props }, ref) => (

  <h3
    ref={ref}
    className={cn('font-bold leading-none tracking-tight text-white', className)}
    {...props}
  />
));
ModernCardTitle.displayName = 'ModernCardTitle';const ModernCardDescription = React.forwardRef
HTMLParagraphElement,
React.HTMLAttributes<HTMLParagraphElement>

(({ className, ...props }, ref) => (

  <p
    ref={ref}
    className={cn('text-sm text-gray-400', className)}
    {...props}
  />
));
ModernCardDescription.displayName = 'ModernCardDescription';const ModernCardContent = React.forwardRef
HTMLDivElement,
React.HTMLAttributes<HTMLDivElement>

(({ className, ...props }, ref) => (

  <div ref={ref} className={cn('p-6 pt-0', className)} {...props} />
));
ModernCardContent.displayName = 'ModernCardContent';const ModernCardFooter = React.forwardRef
HTMLDivElement,
React.HTMLAttributes<HTMLDivElement>

(({ className, ...props }, ref) => (

  <div
    ref={ref}
    className={cn('flex items-center p-6 pt-0', className)}
    {...props}
  />
));
ModernCardFooter.displayName = 'ModernCardFooter';export {
ModernCard,
ModernCardHeader,
ModernCardFooter,
ModernCardTitle,
ModernCardDescription,
ModernCardContent,
};

2. src/components/ui/button.tsx
```typescriptimport * as React from 'react';
import { Slot } from '@radix-ui/react-slot';
import { cva, type VariantProps } from 'class-variance-authority';
import { cn } from '@/lib/utils';const buttonVariants = cva(
'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-bold uppercase transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#FFC000] focus-visible:ring-offset-2 focus-visible:ring-offset-[#1F2937] disabled:pointer-events-none disabled:opacity-50',
{
variants: {
variant: {
default: 'bg-[#FFC000] text-black hover:bg-[#FFD700] border-2 border-black',
outline: 'border-2 border-black bg-transparent text-white hover:bg-[#374151]',
ghost: 'hover:bg-[#374151] text-white',
destructive: 'bg-red-600 text-white hover:bg-red-700 border-2 border-black',
},
size: {
default: 'h-10 px-4 py-2',
sm: 'h-9 rounded-md px-3',
lg: 'h-11 rounded-md px-8',
icon: 'h-10 w-10',
},
},
defaultVariants: {
variant: 'default',
size: 'default',
},
}
);export interface ButtonProps
extends React.ButtonHTMLAttributes<HTMLButtonElement>,
VariantProps<typeof buttonVariants> {
asChild?: boolean;
}const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
({ className, variant, size, asChild = false, ...props }, ref) => {
const Comp = asChild ? Slot : 'button';
return (
<Comp
className={cn(buttonVariants({ variant, size, className }))}
ref={ref}
{...props}
/>
);
}
);
Button.displayName = 'Button';export { Button, buttonVariants };

3. src/components/ui/input.tsx
```typescriptimport * as React from 'react';
import { cn } from '@/lib/utils';export interface InputProps
extends React.InputHTMLAttributes<HTMLInputElement> {}const Input = React.forwardRef<HTMLInputElement, InputProps>(
({ className, type, ...props }, ref) => {
return (
<input
type={type}
className={cn(
'flex h-10 w-full rounded-md border-2 border-black bg-[#374151] px-3 py-2 text-sm text-white placeholder:text-gray-400 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#FFC000] focus-visible:ring-offset-2 focus-visible:ring-offset-[#1F2937] disabled:cursor-not-allowed disabled:opacity-50',
className
)}
ref={ref}
{...props}
/>
);
}
);
Input.displayName = 'Input';export { Input };

4. src/components/ui/textarea.tsx
```typescriptimport * as React from 'react';
import { cn } from '@/lib/utils';export interface TextareaProps
extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
({ className, ...props }, ref) => {
return (
<textarea
className={cn(
'flex min-h-[80px] w-full rounded-md border-2 border-black bg-[#374151] px-3 py-2 text-sm text-white placeholder:text-gray-400 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#FFC000] focus-visible:ring-offset-2 focus-visible:ring-offset-[#1F2937] disabled:cursor-not-allowed disabled:opacity-50',
className
)}
ref={ref}
{...props}
/>
);
}
);
Textarea.displayName = 'Textarea';export { Textarea };

5. src/components/ui/label.tsx
```typescriptimport * as React from 'react';
import * as LabelPrimitive from '@radix-ui/react-label';
import { cn } from '@/lib/utils';const Label = React.forwardRef
React.ElementRef<typeof LabelPrimitive.Root>,
React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>

(({ className, ...props }, ref) => (
<LabelPrimitive.Root
ref={ref}
className={cn(
'text-sm font-medium text-white leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70',
className
)}
{...props}
/>
));
Label.displayName = LabelPrimitive.Root.displayName;
export { Label };

6. src/components/ui/badge.tsx
```typescriptimport * as React from 'react';
import { cva, type VariantProps } from 'class-variance-authority';
import { cn } from '@/lib/utils';const badgeVariants = cva(
'inline-flex items-center rounded-full border-2 border-black px-2.5 py-0.5 text-xs font-bold uppercase transition-colors focus:outline-none focus:ring-2 focus:ring-[#FFC000] focus:ring-offset-2',
{
variants: {
variant: {
default: 'bg-[#FFC000] text-black',
outline: 'bg-transparent text-white',
secondary: 'bg-[#374151] text-white',
},
},
defaultVariants: {
variant: 'default',
},
}
);export interface BadgeProps
extends React.HTMLAttributes<HTMLDivElement>,
VariantProps<typeof badgeVariants> {}function Badge({ className, variant, ...props }: BadgeProps) {
return (
<div className={cn(badgeVariants({ variant }), className)} {...props} />
);
}export { Badge, badgeVariants };

Create the remaining components (select, tabs, dialog, radio-group, alert, progress) following the same pattern in subsequent prompts if needed, or I can provide them all now.

DELIVERABLES:
1. ModernCard components
2. Button with variants
3. Input and Textarea
4. Label
5. Badge

Give me git commands afterwards.