-- Migration: Current Database State (v1.3.0)
-- Generated: 2025-01-XX
-- Source: Direct export from Supabase production
-- 
-- This file documents the ACTUAL current state of the database
-- as deployed in production. All features through v1.3.0-alpha
-- are included.

-- ============================================================================
-- CORE TABLES
-- ============================================================================

-- Profiles (extends auth.users)
CREATE TABLE IF NOT EXISTS profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  nickname TEXT,
  avatar_url TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Collections
CREATE TABLE IF NOT EXISTS collections (
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  name TEXT NOT NULL,
  competition TEXT NOT NULL,
  year TEXT NOT NULL,
  description TEXT,
  image_url TEXT,
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Collection Teams
CREATE TABLE IF NOT EXISTS collection_teams (
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  collection_id INTEGER REFERENCES collections(id) ON DELETE CASCADE,
  team_name TEXT NOT NULL,
  team_code TEXT,
  logo_url TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Stickers (with v1.3.0 enhancements)
CREATE TABLE IF NOT EXISTS stickers (
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  collection_id INTEGER REFERENCES collections(id) ON DELETE CASCADE,
  team_id INTEGER REFERENCES collection_teams(id) ON DELETE SET NULL,
  code TEXT NOT NULL,
  player_name TEXT NOT NULL,
  position TEXT,
  nationality TEXT,
  rating INTEGER,
  rarity TEXT CHECK (rarity IN ('common', 'rare', 'epic', 'legendary')),
  image_url TEXT,
  sticker_number INTEGER,
  image_path_webp_300 TEXT,
  thumb_path_webp_100 TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  CONSTRAINT unique_sticker_code UNIQUE (collection_id, code)
);

-- User Collections
CREATE TABLE IF NOT EXISTS user_collections (
  user_id UUID REFERENCES profiles(id) ON DELETE CASCADE,
  collection_id INTEGER REFERENCES collections(id) ON DELETE CASCADE,
  is_active BOOLEAN DEFAULT false,
  joined_at TIMESTAMPTZ DEFAULT NOW(),
  PRIMARY KEY (user_id, collection_id),
  CONSTRAINT unique_active_per_user 
    UNIQUE (user_id, is_active) 
    WHERE (is_active = true)
);

-- User Stickers
CREATE TABLE IF NOT EXISTS user_stickers (
  user_id UUID REFERENCES profiles(id) ON DELETE CASCADE,
  sticker_id INTEGER REFERENCES stickers(id) ON DELETE CASCADE,
  count INTEGER NOT NULL DEFAULT 0,
  wanted BOOLEAN DEFAULT false,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),
  PRIMARY KEY (user_id, sticker_id)
);

-- ============================================================================
-- ALBUM PAGES SYSTEM (v1.3.0)
-- ============================================================================

-- Collection Pages
CREATE TABLE IF NOT EXISTS collection_pages (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  collection_id INTEGER NOT NULL REFERENCES collections(id) ON DELETE CASCADE,
  kind TEXT NOT NULL CHECK (kind IN ('team', 'special')),
  team_id INTEGER REFERENCES collection_teams(id) ON DELETE SET NULL,
  title TEXT NOT NULL,
  order_index INTEGER NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  CONSTRAINT collection_pages_kind_team_check
    CHECK ((kind = 'team' AND team_id IS NOT NULL) OR 
           (kind = 'special' AND team_id IS NULL))
);

-- Page Slots
CREATE TABLE IF NOT EXISTS page_slots (
  page_id BIGINT NOT NULL REFERENCES collection_pages(id) ON DELETE CASCADE,
  slot_index INTEGER NOT NULL,
  sticker_id INTEGER REFERENCES stickers(id) ON DELETE SET NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  PRIMARY KEY (page_id, slot_index)
);

-- ============================================================================
-- TRADING SYSTEM
-- ============================================================================

-- Trade Proposals
CREATE TABLE IF NOT EXISTS trade_proposals (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  collection_id INTEGER NOT NULL REFERENCES collections(id) ON DELETE CASCADE,
  from_user UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  to_user UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  status TEXT NOT NULL DEFAULT 'pending' 
    CHECK (status IN ('pending', 'accepted', 'rejected', 'cancelled')),
  message TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Trade Proposal Items
CREATE TABLE IF NOT EXISTS trade_proposal_items (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  proposal_id BIGINT NOT NULL REFERENCES trade_proposals(id) ON DELETE CASCADE,
  sticker_id INTEGER NOT NULL REFERENCES stickers(id) ON DELETE CASCADE,
  count INTEGER NOT NULL CHECK (count > 0),
  direction TEXT NOT NULL CHECK (direction IN ('offer', 'request')),
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Trade Chats
CREATE TABLE IF NOT EXISTS trade_chats (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  trade_id BIGINT NOT NULL REFERENCES trade_proposals(id) ON DELETE CASCADE,
  sender_id UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  message TEXT NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Trades History
CREATE TABLE IF NOT EXISTS trades_history (
  trade_id BIGINT PRIMARY KEY REFERENCES trade_proposals(id) ON DELETE CASCADE,
  status TEXT NOT NULL CHECK (status IN ('completed', 'cancelled')),
  completed_at TIMESTAMPTZ,
  cancelled_at TIMESTAMPTZ,
  metadata JSONB NOT NULL DEFAULT '{}'::jsonb
);

-- ============================================================================
-- BADGES & ACHIEVEMENTS (v1.3.0)
-- ============================================================================

-- User Badges
CREATE TABLE IF NOT EXISTS user_badges (
  id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  user_id UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  badge_code TEXT NOT NULL,
  awarded_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  CONSTRAINT user_badges_user_code_unique UNIQUE (user_id, badge_code)
);

-- ============================================================================
-- INDEXES
-- ============================================================================

-- Collections
CREATE INDEX IF NOT EXISTS idx_collections_active ON collections(is_active);

-- Collection Teams
CREATE INDEX IF NOT EXISTS idx_collection_teams_collection ON collection_teams(collection_id);
CREATE INDEX IF NOT EXISTS idx_collection_teams_name ON collection_teams(team_name);

-- Stickers
CREATE INDEX IF NOT EXISTS idx_stickers_collection ON stickers(collection_id);
CREATE INDEX IF NOT EXISTS idx_stickers_collection_filters 
  ON stickers(collection_id, rarity, team_id, player_name);
CREATE UNIQUE INDEX IF NOT EXISTS idx_stickers_collection_number_unique 
  ON stickers(collection_id, sticker_number) 
  WHERE sticker_number IS NOT NULL;

-- User Stickers
CREATE INDEX IF NOT EXISTS idx_user_stickers_trading 
  ON user_stickers(sticker_id, user_id, wanted, count);

-- Collection Pages
CREATE INDEX IF NOT EXISTS idx_collection_pages_order 
  ON collection_pages(collection_id, order_index);

-- Page Slots
CREATE INDEX IF NOT EXISTS idx_page_slots_page_slot 
  ON page_slots(page_id, slot_index);

-- Trade Proposals
CREATE INDEX IF NOT EXISTS idx_trade_proposals_from_user 
  ON trade_proposals(from_user, status);
CREATE INDEX IF NOT EXISTS idx_trade_proposals_to_user 
  ON trade_proposals(to_user, status);
CREATE INDEX IF NOT EXISTS idx_trade_proposals_status 
  ON trade_proposals(status);

-- Trade Proposal Items
CREATE INDEX IF NOT EXISTS idx_trade_proposal_items_proposal 
  ON trade_proposal_items(proposal_id);

-- Trade Chats
CREATE INDEX IF NOT EXISTS idx_trade_chats_trade_created_at 
  ON trade_chats(trade_id, created_at);

-- ============================================================================
-- TRIGGERS
-- ============================================================================

-- Updated At Trigger Function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$ LANGUAGE plpgsql;

-- Apply to relevant tables
DROP TRIGGER IF EXISTS handle_updated_at ON profiles;
CREATE TRIGGER handle_updated_at 
  BEFORE UPDATE ON profiles
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

DROP TRIGGER IF EXISTS handle_updated_at ON user_stickers;
CREATE TRIGGER handle_updated_at 
  BEFORE UPDATE ON user_stickers
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

DROP TRIGGER IF EXISTS handle_updated_at ON trade_proposals;
CREATE TRIGGER handle_updated_at 
  BEFORE UPDATE ON trade_proposals
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- ============================================================================
-- RLS POLICIES
-- ============================================================================

-- Enable RLS on all tables
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE collections ENABLE ROW LEVEL SECURITY;
ALTER TABLE collection_teams ENABLE ROW LEVEL SECURITY;
ALTER TABLE stickers ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_collections ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_stickers ENABLE ROW LEVEL SECURITY;
ALTER TABLE collection_pages ENABLE ROW LEVEL SECURITY;
ALTER TABLE page_slots ENABLE ROW LEVEL SECURITY;
ALTER TABLE trade_proposals ENABLE ROW LEVEL SECURITY;
ALTER TABLE trade_proposal_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE trade_chats ENABLE ROW LEVEL SECURITY;
ALTER TABLE trades_history ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_badges ENABLE ROW LEVEL SECURITY;

-- Profiles: Users can read all, update own
CREATE POLICY "Profiles are viewable by everyone" ON profiles
  FOR SELECT USING (true);

CREATE POLICY "Users can update own profile" ON profiles
  FOR UPDATE USING (auth.uid() = id);

-- Collections: Public read
CREATE POLICY "Collections are viewable by everyone" ON collections
  FOR SELECT USING (true);

-- Collection Teams: Public read
CREATE POLICY "Collection teams are viewable by everyone" ON collection_teams
  FOR SELECT USING (true);

-- Stickers: Public read
CREATE POLICY "Stickers are viewable by everyone" ON stickers
  FOR SELECT USING (true);

-- User Collections: Users manage own
CREATE POLICY "Users can manage own collections" ON user_collections
  FOR ALL USING (auth.uid() = user_id);

-- User Stickers: Users manage own
CREATE POLICY "Users can manage own stickers" ON user_stickers
  FOR ALL USING (auth.uid() = user_id);

-- Collection Pages: Public read, no client writes
CREATE POLICY "Collection pages are viewable by everyone" ON collection_pages
  FOR SELECT USING (true);

CREATE POLICY "Collection pages no client writes" ON collection_pages
  FOR ALL USING (false) WITH CHECK (false);

-- Page Slots: Public read, no client writes
CREATE POLICY "Page slots are viewable by everyone" ON page_slots
  FOR SELECT USING (true);

CREATE POLICY "Page slots no client writes" ON page_slots
  FOR ALL USING (false) WITH CHECK (false);

-- Trade Proposals: Only participants can view
CREATE POLICY "Users can view their proposals" ON trade_proposals
  FOR SELECT USING (auth.uid() = from_user OR auth.uid() = to_user);

CREATE POLICY "No direct proposal writes" ON trade_proposals
  FOR ALL USING (false) WITH CHECK (false);

-- Trade Proposal Items: Access through proposals
CREATE POLICY "Users can view proposal items" ON trade_proposal_items
  FOR SELECT USING (
    proposal_id IN (
      SELECT id FROM trade_proposals
      WHERE auth.uid() = from_user OR auth.uid() = to_user
    )
  );

-- Trade Chats: Only participants
CREATE POLICY "Participants can read trade chats" ON trade_chats
  FOR SELECT USING (
    trade_id IN (
      SELECT id FROM trade_proposals
      WHERE auth.uid() = from_user OR auth.uid() = to_user
    )
  );

CREATE POLICY "Participants can send messages" ON trade_chats
  FOR INSERT WITH CHECK (
    auth.uid() = sender_id AND
    trade_id IN (
      SELECT id FROM trade_proposals
      WHERE auth.uid() = from_user OR auth.uid() = to_user
    )
  );

-- Trades History: Only participants
CREATE POLICY "Participants can view trade history" ON trades_history
  FOR SELECT USING (
    trade_id IN (
      SELECT id FROM trade_proposals
      WHERE auth.uid() = from_user OR auth.uid() = to_user
    )
  );

-- User Badges: Users can read own
CREATE POLICY "Users can view own badges" ON user_badges
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "No direct badge writes" ON user_badges
  FOR ALL USING (false) WITH CHECK (false);

-- ============================================================================
-- STORAGE BUCKETS
-- ============================================================================

-- Note: These are created via Supabase Dashboard or separate storage commands
-- 
-- sticker-images bucket:
--   - Public read access
--   - Authenticated write only
--   - Max size: 5MB
--   - Allowed: image/webp, image/png, image/jpeg
--
-- avatars bucket:
--   - Public read access
--   - Authenticated write only
--   - Max size: 2MB
--   - Allowed: image/webp, image/png, image/jpeg

-- ============================================================================
-- DATABASE FUNCTIONS (See separate function definitions)
-- ============================================================================

-- Collection Stats:
--   - get_user_collection_stats
--   - get_completion_report (v1.3.0)

-- Sticker Management:
--   - bulk_add_stickers_by_numbers (v1.3.0)
--   - search_stickers (v1.3.0)

-- Trading - Discovery:
--   - find_mutual_traders
--   - get_mutual_trade_detail

-- Trading - Proposals:
--   - create_trade_proposal
--   - respond_to_trade_proposal
--   - list_trade_proposals
--   - get_trade_proposal_detail

-- Trading - History:
--   - complete_trade (v1.3.0)
--   - cancel_trade (v1.3.0)

-- ============================================================================
-- MIGRATION COMPLETE
-- ============================================================================

-- This represents the current production state as of v1.3.0
-- All Phase 2 features are deployed including:
--   ✅ Complete trading proposal system
--   ✅ Album pages with slot management
--   ✅ Trade history and chat infrastructure
--   ✅ User badges system
--   ✅ Enhanced sticker images (WebP)
--
-- Status: PRODUCTION READY